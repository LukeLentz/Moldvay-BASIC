type token =
  | FLOAT of (float)
  | INT of (int)
  | TRUE
  | FALSE
  | DBLSEMI
  | SEMI
  | COMMA
  | IF
  | THEN
  | ELSE
  | OR
  | AND
  | NOT
  | XOR
  | NAND
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PLUSF
  | MINUSF
  | TIMESF
  | DIVIDEF
  | COMPOP of (string)
  | VARIABLE of (string)
  | EQ
  | NEQ
  | LET
  | BE
  | IN
  | L_PAREN
  | R_PAREN
  | FUN
  | COLON
  | ARROW
  | ARG of (string)
  | LIST of (string)
  | INTTYPE
  | FLOATTYPE
  | BOOLTYPE
  | LISTTYPE
  | TUPLETYPE
  | L_BRACK
  | R_BRACK
  | CONS
  | HEAD
  | TAIL

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Types
# 55 "parser.ml"
let yytransl_const = [|
  259 (* TRUE *);
  260 (* FALSE *);
  261 (* DBLSEMI *);
  262 (* SEMI *);
  263 (* COMMA *);
  264 (* IF *);
  265 (* THEN *);
  266 (* ELSE *);
  267 (* OR *);
  268 (* AND *);
  269 (* NOT *);
  270 (* XOR *);
  271 (* NAND *);
  272 (* PLUS *);
  273 (* MINUS *);
  274 (* TIMES *);
  275 (* DIVIDE *);
  276 (* PLUSF *);
  277 (* MINUSF *);
  278 (* TIMESF *);
  279 (* DIVIDEF *);
  282 (* EQ *);
  283 (* NEQ *);
  284 (* LET *);
  285 (* BE *);
  286 (* IN *);
  287 (* L_PAREN *);
  288 (* R_PAREN *);
  289 (* FUN *);
  290 (* COLON *);
  291 (* ARROW *);
  294 (* INTTYPE *);
  295 (* FLOATTYPE *);
  296 (* BOOLTYPE *);
  297 (* LISTTYPE *);
  298 (* TUPLETYPE *);
  299 (* L_BRACK *);
  300 (* R_BRACK *);
  301 (* CONS *);
  302 (* HEAD *);
  303 (* TAIL *);
    0|]

let yytransl_block = [|
  257 (* FLOAT *);
  258 (* INT *);
  280 (* COMPOP *);
  281 (* VARIABLE *);
  292 (* ARG *);
  293 (* LIST *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\002\000\002\000\002\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\004\000\004\000\005\000\005\000\005\000\006\000\006\000\
\006\000\000\000"

let yylen = "\002\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\002\000\002\000\003\000\
\006\000\003\000\003\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\006\000\006\000\000\000\001\000\003\000\000\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\006\000\007\000\008\000\009\000\000\000\000\000\
\010\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\016\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\029\000\000\000\000\000\028\000\
\030\000\000\000\000\000\000\000\000\000\000\000\000\000\041\000\
\003\000\004\000\005\000\000\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\017\000\076\000\018\000\026\000\027\000\024\000"

let yysindex = "\010\000\
\055\255\000\000\000\000\000\000\000\000\000\000\055\255\055\255\
\000\000\243\254\055\255\233\254\000\000\055\255\055\255\055\255\
\000\000\011\255\041\001\006\001\036\000\244\254\188\000\245\254\
\240\254\207\000\231\254\041\001\041\001\000\000\055\255\055\255\
\055\255\055\255\055\255\055\255\055\255\055\255\055\255\055\255\
\055\255\055\255\055\255\055\255\055\255\055\255\055\255\055\255\
\000\000\000\000\219\254\055\255\000\000\053\001\053\001\053\001\
\053\001\242\254\242\254\000\000\000\000\242\254\242\254\000\000\
\000\000\053\255\036\000\036\000\024\001\242\000\225\000\000\000\
\000\000\000\000\000\000\241\254\000\000\055\255\055\255\055\255\
\041\001\041\001\041\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\246\254\000\000\000\000\238\254\000\000\000\000\
\000\000\000\000\024\255\000\000\219\255\000\000\000\000\000\000\
\000\000\005\255\000\000\018\255\234\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\246\254\
\000\000\000\000\000\000\238\254\000\000\019\000\032\000\060\000\
\073\000\098\255\129\255\000\000\000\000\160\255\191\255\000\000\
\000\000\247\255\101\000\114\000\000\000\000\000\019\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\129\000\142\000\157\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\255\255\001\000\004\000"

let yytablesize = 592
let yytable = "\019\000\
\073\000\074\000\075\000\037\000\038\000\020\000\021\000\041\000\
\042\000\023\000\001\000\022\000\025\000\028\000\029\000\030\000\
\047\000\051\000\053\000\080\000\050\000\039\000\014\000\014\000\
\014\000\036\000\014\000\014\000\002\000\054\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\014\000\
\037\000\014\000\040\000\072\000\077\000\000\000\000\000\003\000\
\004\000\005\000\006\000\000\000\000\000\014\000\007\000\000\000\
\000\000\000\000\000\000\008\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\081\000\082\000\083\000\009\000\
\000\000\000\000\010\000\000\000\000\000\011\000\000\000\012\000\
\000\000\000\000\013\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\000\000\000\000\015\000\016\000\023\000\023\000\
\023\000\000\000\023\000\023\000\023\000\023\000\000\000\023\000\
\023\000\023\000\023\000\000\000\000\000\023\000\023\000\000\000\
\000\000\023\000\000\000\023\000\023\000\000\000\000\000\023\000\
\000\000\023\000\000\000\000\000\000\000\025\000\025\000\025\000\
\000\000\025\000\025\000\025\000\025\000\023\000\025\000\025\000\
\025\000\025\000\000\000\000\000\025\000\025\000\000\000\000\000\
\025\000\000\000\025\000\025\000\000\000\000\000\025\000\000\000\
\025\000\000\000\000\000\000\000\024\000\024\000\024\000\000\000\
\024\000\024\000\024\000\024\000\025\000\024\000\024\000\024\000\
\024\000\000\000\000\000\024\000\024\000\000\000\000\000\024\000\
\000\000\024\000\024\000\000\000\000\000\024\000\000\000\024\000\
\000\000\000\000\000\000\026\000\026\000\026\000\000\000\026\000\
\026\000\026\000\026\000\024\000\026\000\026\000\026\000\026\000\
\000\000\000\000\026\000\026\000\000\000\000\000\026\000\000\000\
\026\000\026\000\000\000\000\000\026\000\000\000\026\000\020\000\
\020\000\020\000\000\000\020\000\020\000\020\000\020\000\000\000\
\020\000\020\000\026\000\000\000\000\000\000\000\015\000\015\000\
\015\000\000\000\015\000\015\000\020\000\020\000\000\000\000\000\
\020\000\000\000\020\000\031\000\031\000\031\000\000\000\031\000\
\031\000\031\000\031\000\000\000\031\000\031\000\020\000\015\000\
\000\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\031\000\000\000\000\000\031\000\015\000\031\000\018\000\
\018\000\018\000\000\000\018\000\018\000\018\000\018\000\000\000\
\018\000\018\000\031\000\000\000\019\000\019\000\019\000\000\000\
\019\000\019\000\019\000\019\000\000\000\019\000\019\000\000\000\
\018\000\000\000\018\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\000\000\019\000\018\000\019\000\
\021\000\021\000\021\000\000\000\021\000\021\000\021\000\021\000\
\000\000\021\000\021\000\019\000\000\000\022\000\022\000\022\000\
\000\000\022\000\022\000\022\000\022\000\000\000\022\000\022\000\
\000\000\021\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\022\000\021\000\
\022\000\032\000\032\000\032\000\000\000\032\000\032\000\032\000\
\032\000\000\000\032\000\032\000\022\000\000\000\033\000\033\000\
\033\000\000\000\033\000\033\000\033\000\033\000\000\000\033\000\
\033\000\000\000\032\000\000\000\032\000\017\000\017\000\017\000\
\000\000\017\000\017\000\000\000\000\000\000\000\000\000\033\000\
\032\000\033\000\034\000\034\000\034\000\000\000\034\000\034\000\
\000\000\000\000\000\000\000\000\000\000\033\000\017\000\000\000\
\017\000\035\000\035\000\035\000\000\000\035\000\035\000\000\000\
\000\000\000\000\000\000\034\000\017\000\034\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\034\000\035\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\048\000\000\000\000\000\000\000\031\000\032\000\
\035\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\052\000\044\000\045\000\000\000\
\000\000\031\000\032\000\049\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\048\000\
\044\000\045\000\000\000\031\000\032\000\000\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\000\000\044\000\045\000\031\000\032\000\000\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\000\000\044\000\045\000\000\000\046\000\079\000\
\031\000\032\000\000\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\000\000\044\000\
\045\000\078\000\031\000\032\000\000\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\000\000\044\000\045\000\031\000\032\000\000\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\000\000\044\000\045\000\035\000\036\000\037\000\038\000\
\039\000\040\000\041\000\042\000\043\000\000\000\044\000\045\000"

let yycheck = "\001\000\
\038\001\039\001\040\001\018\001\019\001\007\000\008\000\022\001\
\023\001\011\000\001\000\025\001\036\001\015\000\016\000\005\001\
\029\001\034\001\044\001\035\001\032\001\032\001\005\001\006\001\
\007\001\044\001\009\001\010\001\005\001\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\030\001\
\044\001\032\001\032\001\048\000\052\000\255\255\255\255\001\001\
\002\001\003\001\004\001\255\255\255\255\044\001\008\001\255\255\
\255\255\255\255\255\255\013\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\078\000\079\000\080\000\025\001\
\255\255\255\255\028\001\255\255\255\255\031\001\255\255\033\001\
\255\255\255\255\036\001\255\255\255\255\255\255\255\255\255\255\
\255\255\043\001\255\255\255\255\046\001\047\001\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\012\001\255\255\014\001\
\015\001\016\001\017\001\255\255\255\255\020\001\021\001\255\255\
\255\255\024\001\255\255\026\001\027\001\255\255\255\255\030\001\
\255\255\032\001\255\255\255\255\255\255\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\012\001\044\001\014\001\015\001\
\016\001\017\001\255\255\255\255\020\001\021\001\255\255\255\255\
\024\001\255\255\026\001\027\001\255\255\255\255\030\001\255\255\
\032\001\255\255\255\255\255\255\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\012\001\044\001\014\001\015\001\016\001\
\017\001\255\255\255\255\020\001\021\001\255\255\255\255\024\001\
\255\255\026\001\027\001\255\255\255\255\030\001\255\255\032\001\
\255\255\255\255\255\255\005\001\006\001\007\001\255\255\009\001\
\010\001\011\001\012\001\044\001\014\001\015\001\016\001\017\001\
\255\255\255\255\020\001\021\001\255\255\255\255\024\001\255\255\
\026\001\027\001\255\255\255\255\030\001\255\255\032\001\005\001\
\006\001\007\001\255\255\009\001\010\001\011\001\012\001\255\255\
\014\001\015\001\044\001\255\255\255\255\255\255\005\001\006\001\
\007\001\255\255\009\001\010\001\026\001\027\001\255\255\255\255\
\030\001\255\255\032\001\005\001\006\001\007\001\255\255\009\001\
\010\001\011\001\012\001\255\255\014\001\015\001\044\001\030\001\
\255\255\032\001\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\030\001\044\001\032\001\005\001\
\006\001\007\001\255\255\009\001\010\001\011\001\012\001\255\255\
\014\001\015\001\044\001\255\255\005\001\006\001\007\001\255\255\
\009\001\010\001\011\001\012\001\255\255\014\001\015\001\255\255\
\030\001\255\255\032\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\255\255\030\001\044\001\032\001\
\005\001\006\001\007\001\255\255\009\001\010\001\011\001\012\001\
\255\255\014\001\015\001\044\001\255\255\005\001\006\001\007\001\
\255\255\009\001\010\001\011\001\012\001\255\255\014\001\015\001\
\255\255\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\044\001\
\032\001\005\001\006\001\007\001\255\255\009\001\010\001\011\001\
\012\001\255\255\014\001\015\001\044\001\255\255\005\001\006\001\
\007\001\255\255\009\001\010\001\011\001\012\001\255\255\014\001\
\015\001\255\255\030\001\255\255\032\001\005\001\006\001\007\001\
\255\255\009\001\010\001\255\255\255\255\255\255\255\255\030\001\
\044\001\032\001\005\001\006\001\007\001\255\255\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\044\001\030\001\255\255\
\032\001\005\001\006\001\007\001\255\255\009\001\010\001\255\255\
\255\255\255\255\255\255\030\001\044\001\032\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\044\001\030\001\255\255\032\001\255\255\255\255\255\255\
\255\255\255\255\007\001\255\255\255\255\255\255\011\001\012\001\
\044\001\014\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\006\001\026\001\027\001\255\255\
\255\255\011\001\012\001\032\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\007\001\
\026\001\027\001\255\255\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\026\001\027\001\011\001\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\024\001\255\255\026\001\027\001\255\255\009\001\030\001\
\011\001\012\001\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\255\255\026\001\
\027\001\010\001\011\001\012\001\255\255\014\001\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\024\001\
\255\255\026\001\027\001\011\001\012\001\255\255\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\255\255\026\001\027\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\255\255\026\001\027\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  DBLSEMI\000\
  SEMI\000\
  COMMA\000\
  IF\000\
  THEN\000\
  ELSE\000\
  OR\000\
  AND\000\
  NOT\000\
  XOR\000\
  NAND\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PLUSF\000\
  MINUSF\000\
  TIMESF\000\
  DIVIDEF\000\
  EQ\000\
  NEQ\000\
  LET\000\
  BE\000\
  IN\000\
  L_PAREN\000\
  R_PAREN\000\
  FUN\000\
  COLON\000\
  ARROW\000\
  INTTYPE\000\
  FLOATTYPE\000\
  BOOLTYPE\000\
  LISTTYPE\000\
  TUPLETYPE\000\
  L_BRACK\000\
  R_BRACK\000\
  CONS\000\
  HEAD\000\
  TAIL\000\
  "

let yynames_block = "\
  FLOAT\000\
  INT\000\
  COMPOP\000\
  VARIABLE\000\
  ARG\000\
  LIST\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'headEx) in
    Obj.repr(
# 51 "parser.mly"
                                 ( _1 )
# 383 "parser.ml"
               : Types.exprS))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                                 ( _1 )
# 390 "parser.ml"
               : 'headEx))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                        ( IntT )
# 396 "parser.ml"
               : Types.types))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                     ( FloatT )
# 402 "parser.ml"
               : Types.types))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
                       ( BoolT )
# 408 "parser.ml"
               : Types.types))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 67 "parser.mly"
                                 ( FloatS _1 )
# 415 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 68 "parser.mly"
                                 ( IntS _1 )
# 422 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "parser.mly"
                                 ( BoolS true )
# 428 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                                 ( BoolS false )
# 434 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
                                ( VarS _1 )
# 441 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 72 "parser.mly"
                                    ( ArgS _1 )
# 448 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 73 "parser.mly"
                               ( _2 )
# 455 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'lists) in
    Obj.repr(
# 74 "parser.mly"
                           ( ListS _2 )
# 462 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                         ( HeadS _2 )
# 469 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 76 "parser.mly"
                            ( TailS _2 )
# 476 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuples) in
    Obj.repr(
# 77 "parser.mly"
                           ( TupleS _2 )
# 483 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                                 ( IfS(_2,_4,_6) )
# 492 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                              ( OrS(_1 , _3) )
# 500 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                             ( AndS(_1 , _3) )
# 508 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                             ( NotS(_2) )
# 515 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                                 ( XOrS(_1,_3) )
# 523 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                                 ( NAndS(_1,_3) )
# 531 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                              ( ArithS("+",_1,_3) )
# 539 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                                 ( ArithS("+.",_1,_3) )
# 547 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                              ( ArithS("-",_1,_3) )
# 555 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                                 ( ArithS("-.",_1,_3) )
# 563 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                               ( ArithS("*",_1,_3) )
# 571 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                                 ( ArithS("*.",_1,_3) )
# 579 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                                ( ArithS("/",_1,_3) )
# 587 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                                 ( ArithS("/.",_1,_3) )
# 595 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                               ( CompS (_2, _1, _3) )
# 604 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                              ( EqS (_1, _3) )
# 612 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                             ( NeqS (_1, _3) )
# 620 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                                      ( LetS (_2, _4, _6) )
# 629 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Types.types) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 96 "parser.mly"
                                         ( FunS (_2, _4, _6) )
# 638 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "parser.mly"
                        ( [] )
# 644 "parser.ml"
               : 'lists))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                     ( [_1] )
# 651 "parser.ml"
               : 'lists))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lists) in
    Obj.repr(
# 102 "parser.mly"
                          ( _1 :: _3 )
# 659 "parser.ml"
               : 'lists))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                    ( [] )
# 665 "parser.ml"
               : 'tuples))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                ( [_1] )
# 672 "parser.ml"
               : 'tuples))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuples) in
    Obj.repr(
# 108 "parser.mly"
                        ( _1 :: _3 )
# 680 "parser.ml"
               : 'tuples))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Types.exprS)
